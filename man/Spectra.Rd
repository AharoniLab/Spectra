% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Spectra.R
\docType{methods}
\name{Spectra}
\alias{Spectra}
\alias{Spectra-class}
\alias{Spectra,DataFrame-method}
\alias{Spectra,missing-method}
\alias{fromFile,Spectra-method}
\alias{length,Spectra-method}
\alias{msLevel,Spectra-method}
\alias{removePeaks,Spectra-method}
\alias{clean,Spectra-method}
\alias{peaks,Spectra-method}
\title{The Spectra class to manage and access MS data}
\usage{
\S4method{Spectra}{DataFrame}(object, processingQueue = list(),
  metadata = list(), ..., backend = MsBackendDataFrame(),
  BPPARAM = bpparam())

\S4method{Spectra}{missing}(object, processingQueue = list(),
  metadata = list(), ..., backend = MsBackendDataFrame(),
  BPPARAM = bpparam())

\S4method{fromFile}{Spectra}(object)

\S4method{length}{Spectra}(x)

\S4method{msLevel}{Spectra}(object)

\S4method{removePeaks}{Spectra}(object, t = "min", msLevel.)

\S4method{clean}{Spectra}(object, all = FALSE, msLevel.)

\S4method{peaks}{Spectra}(object, ...)
}
\arguments{
\item{object}{For \code{Spectra}: either a \code{DataFrame} or \code{missing}. See section
on creation of \code{Spectra} objects for details. For all other methods a
\code{Spectra} object.}

\item{processingQueue}{For \code{Spectra}: optional \code{list} of
\linkS4class{ProcessingStep} objects.}

\item{metadata}{For \code{Spectra}: optional \code{list} with metadata information.}

\item{...}{Additional arguments.}

\item{backend}{For \code{Spectra}: \linkS4class{MsBackend} to be used as backend. See
section on creation of \code{Spectra} objects for details.}

\item{BPPARAM}{Parallel setup configuration. See \code{\link[=bpparam]{bpparam()}} for more
information. This is passed directly to the \code{\link[=backendInitialize]{backendInitialize()}} method
of the \linkS4class{MsBackend}.}

\item{x}{A \code{Spectra} object.}

\item{t}{for \code{removePeaks}: a \code{numeric(1)} defining the threshold or \code{"min"}.}

\item{msLevel.}{\code{integer} defining the MS level(s) of the spectra to which
the function should be applied. For \code{filterMsLevel}: the MS level to
which \code{object} should be subsetted.}

\item{all}{for \code{clean}: \code{logical(1)} whether all 0 intensity peaks should be
removed (\code{TRUE}) or whether 0-intensity peaks directly adjacent to a
non-zero intensity peak should be kept (\code{FALSE}).}
}
\value{
See individual method description for the return value.
}
\description{
The \code{Spectra} class encapsules spectral mass spectrometry data and
related metadata.

It supports multiple data backends, e.g. in-memory (\code{\link[=MsBackendDataFrame]{MsBackendDataFrame()}}),
on-disk as mzML (\code{\link[=MsBackendMzR]{MsBackendMzR()}}).
}
\details{
The \code{Spectra} class uses by default a lazy data manipulation strategy,
i.e. data manipulations such as performed with \code{removePeaks} are not applied
immediately to the data, but applied on-the-fly to the spectrum data once it
is retrieved.
}
\section{Creation of objects, conversion and changing the backend}{


\code{Spectra} classes can be created with the \code{Spectra} constructor function
which supports the following formats:
\itemize{
\item parameter \code{object} is a \code{DataFrame} containing the spectrum data. The
provided \code{backend} (by default a \linkS4class{MsBackendDataFrame}) will be
initialized with that data.
\item parameter \code{object} is missing, in which case it is supposed that the data
is provided by the \linkS4class{MsBackend} class passed along with the \code{backend}
argument.
}

\code{Spectra} classes are usually created with the \code{readSpectra}
function that reads general spectrum metadata information from the  mass
spectrometry data files.
}

\section{Accessing data}{

\itemize{
\item \code{fromFile}: get the file/sample assignment of each spectrum. Returns an
integer vector of length equal to the number of spectra.
\item \code{length}: get the number of spectra in the object.
\item \code{msLevel}: get the spectra's MS level. Returns an integer vector (names
being spectrum names, length equal to the number of spectra) with the MS
level for each spectrum.
\item \code{peaks}: get the \emph{peaks} matrices for all spectra in \code{object}. The function
returns a \code{\link[=SimpleList]{SimpleList()}} of matrices, each \code{matrix} with columns \code{mz} and
\code{intensity} with the m/z and intensity values for all peaks of a spectrum.
}
}

\section{Data manipulation and analysis methods}{


Many data manipulation operations, such as those listed in this section, are
not applied immediately to the spectra, but added to a
\emph{lazy processinq queue}. Operations stored in this queue are applied
on-the-fly to spectra data each time it is accessed. This lazy
execution guarantees the same functionality for \code{Spectra} objects with
any backend, i.e. backends supporting to save changes to spectrum data
(\code{\link[=MsBackendDataFrame]{MsBackendDataFrame()}} as well as read-only backends (such
as the \code{\link[=MsBackendMzR]{MsBackendMzR()}}).
\itemize{
\item \code{clean}: remove 0-intensity data points. For \code{all = FALSE} (the default)
0-intensity peaks next to non-zero intensity peaks are retained while with
\code{all = TRUE} all 0-intensity peaks are removed.
\item \code{removePeaks}: \emph{remove} peaks lower or equal to a threshold intensity
value \code{t} by setting their intensity to \code{0}. With the default \code{t = "min"}
all peaks with an intensity smaller or equal to the minimal non-zero
intensity is set to \code{0}. If the spectrum is in profile mode, ranges of
successive non-0 peaks <= \code{t} are set to 0. If the spectrum is centroided,
then individual peaks <= \code{t} are set to 0. Note that the number of peaks
is not changed unless \code{clean} is called after \code{removePeaks}.
}
}

\examples{

## Create a Spectra providing a `DataFrame` containing the spectrum data.

spd <- DataFrame(msLevel = c(1L, 2L), rtime = c(1.1, 1.2))
spd$mz <- list(c(100, 103.2, 104.3, 106.5), c(45.6, 120.4, 190.2))
spd$intensity <- list(c(200, 400, 34.2, 17), c(12.3, 15.2, 6.8))

data <- Spectra(spd)
data

msLevel(data)
}
\author{
Sebastian Gibb, Johannes Rainer
}
