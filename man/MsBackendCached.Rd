% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MsBackendCached.R
\name{MsBackendCached}
\alias{MsBackendCached}
\alias{MsBackendCached-class}
\alias{backendInitialize,MsBackendCached-method}
\alias{dataStorage,MsBackendCached-method}
\alias{length,MsBackendCached-method}
\alias{spectraVariables,MsBackendCached-method}
\alias{spectraData,MsBackendCached-method}
\alias{spectraData<-,MsBackendCached-method}
\alias{[,MsBackendCached-method}
\alias{$<-,MsBackendCached-method}
\alias{selectSpectraVariables,MsBackendCached-method}
\alias{show,MsBackendCached-method}
\title{Base MsBackend class providing data caching mechanism}
\usage{
MsBackendCached()

\S4method{backendInitialize}{MsBackendCached}(
  object,
  data = data.frame(),
  nspectra = 0L,
  spectraVariables = character(),
  ...
)

\S4method{dataStorage}{MsBackendCached}(object)

\S4method{length}{MsBackendCached}(x)

\S4method{spectraVariables}{MsBackendCached}(object)

\S4method{spectraData}{MsBackendCached}(object, columns = spectraVariables(object))

\S4method{spectraData}{MsBackendCached}(object) <- value

\S4method{[}{MsBackendCached}(x, i, j, ..., drop = FALSE)

\S4method{$}{MsBackendCached}(x, name) <- value

\S4method{selectSpectraVariables}{MsBackendCached}(object, spectraVariables = spectraVariables(object))

\S4method{show}{MsBackendCached}(object)
}
\arguments{
\item{object}{A \code{MsBackendCached} object.}

\item{data}{For \code{backendInitialize}: (optional) \code{data.frame} with cached
values. The number of rows (and their order) has to match the number of
spectra.}

\item{nspectra}{For \code{backendInitialize}: \code{integer} with the number of
spectra.}

\item{spectraVariables}{For \code{backendInitialize}: \code{character} with the names
of the spectra variables that are provided by the extending backend.
For \code{selectSpectraVariables}: \code{character} specifying the spectra
variables to keep.}

\item{...}{ignored}

\item{x}{A \code{MsBackendCached} object.}

\item{columns}{For \code{spectraData}: \code{character} with the names of the spectra
variables to retrieve.}

\item{value}{replacement value for \verb{<-} methods. See individual
method description or expected data type.}

\item{i}{For \code{[}: \code{integer} with the indices to subset the object.}

\item{j}{For \code{[}: ignored.}

\item{drop}{For \code{[}: not considered.}

\item{name}{For \verb{$<-}: the name of the spectra variable to set.}
}
\value{
See documentation of respective function.
}
\description{
The \code{MsBackendCached} class is a rudimentary implementation of the
\link{MsBackend} providing a simple mechanism to cache spectra data locally. This
class is thought to be used as a base class for other \code{MsBackend}
implementations to reuse its caching mechanism and avoid having to
re-implement commonly used methods. This class is thus not thought to be
used directly by a user.

The provided caching mechanism by this class allows \code{MsBackend} instances
to add or replace spectra variables even if the backend used by them does
not allow to alter values (e.g. if a SQL database is used as a backend). Any
replacement operation with \verb{$<-} will add the specified values to a local
\code{data.frame} within the \code{MsBackendCached} class that allows to \emph{cache} these
values (increasing obviously the memory demand of the object).

Any data accessor functions of the extending \code{MsBackend} class (such as \code{$}
or \code{msLevel} or \code{spectraData}) should first use \code{callNextMethod} to call the
respective accessor of \code{MsBackendCached} that will evaluate if the
requested spectra variable(s) are in the local cache and return these. If
the requested spectra variables are not in the local cache, are also not in
listed in the \verb{@spectraVariables} slot (which defines all spectra variables
that can be requested from the extending \code{MsBackend} class) but are \emph{core
spectra variables} then missing values of the correct data type are returned.
}
\section{Implementation notes}{


Classes extending the \code{MsBackendCached} need to
\itemize{
\item call the \code{backendInitialize} method of this class in their own
\code{backendInitialize} method and to set at least the number of spectra with
the \code{nspectra} parameter and the \code{spectraVariables} that are available to
the (extending) backend class.
\item use the \code{spectraData} function in their own data accessor methods to
retrieve potentially cached values. The function will return \code{NULL} if the
selected spectra variables were not cached and are not \emph{core spectra
variables} not being provided by the extending backend. Thus, the extending
backend can then proceed to retrieve the respective values from its own
backend/data storage.
}

Spectra variables can be modified or added using the \verb{$<-} method of the
\code{MsBackendCached}. Replacing or adding multiple variables using the
\verb{spectraData<-} is not supported by \code{MsBackendCached}. The extending backend
might however implement such a method that internally uses \verb{$<-} to
add/replace single variables.

The \code{MsBackendCached} has the following slots"
\itemize{
\item \code{nspectra}: \code{integer(1)} defining the number of spectra of the backend.
This variable needs to be set and must match the number of rows of
\code{localData} and the actual number of spectra in the (extending) backend.
\item \code{localData}: \code{data.frame} with the cached local data. Any replacement
operation with \verb{$<-} will set/add a column with the respective values.
\item \code{spectraVariables}: \code{character} defining the spectra variables that are
provided by the extending \code{MsBackend} class (e.g. all spectra variables
that can be retrieved from the data base or original data files).
}
}

\section{Available methods}{

\itemize{
\item \code{backendInitialize}: \emph{initializes} the backend. The method takes parameters
\code{data} (\code{data.frame} with cached data), \code{nspectra} (\code{integer} defining the
number of spectra) and \code{spectraVariables} (\code{character} with the spectra
variables that are provided by the extending backend.
\item \code{length}: returns the number of spectra (i.e. the \verb{@nspectra}).
\item \code{spectraVariables}: returns the available spectra variables, i.e. the
unique set of \emph{core spectra variables}, cached spectra variables and
spectra variables defined in the \verb{@spectraVariables} slot (i.e. spectra
variables thought to be provided by the extending \code{MsBackend} instance).
\item \code{selectSpectraVariables}: subset the object to specified spectra variables.
This will eventually remove spectra variables listed in \verb{@spectraVariables}
and will also drop columns from the local cache if not among
\code{spectraVariables}.
\item \code{spectraData}: returns a \code{DataFrame} with cached spectra variablers or
initialized \emph{core spectra variables}. Parameter \code{spectraVariables} allows
to specify the variables to retrieve. The function returns \code{NULL} if the
requested variables are not cached and are not provided by the extending
backend. Note that this method \strong{only} returns cached spectra variables
or core spectra variables \strong{not} provided by the extending backend. It is
the responsibility of the extending backend to add/provide these.
\item \code{[}: subsets the cached data. Parameter \code{i} needs to be an \code{integer}
vector.
}
}

\author{
Johannes Rainer
}
