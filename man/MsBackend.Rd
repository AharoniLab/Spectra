% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MsBackend.R, R/MsBackendMemory-functions.R
\docType{methods}
\name{MsBackend}
\alias{MsBackend}
\alias{MsBackend-class}
\alias{MsBackendMemory-class}
\alias{backendInitialize,MsBackend-method}
\alias{acquisitionNum,MsBackend-method}
\alias{centroided,MsBackend-method}
\alias{centroided<-,MsBackend-method}
\alias{collisionEnergy,MsBackend-method}
\alias{collisionEnergy<-,MsBackend-method}
\alias{fromFile,MsBackend-method}
\alias{fileNames,MsBackend-method}
\alias{intensity,MsBackend-method}
\alias{ionCount,MsBackend-method}
\alias{isCentroided,MsBackend-method}
\alias{isEmpty,MsBackend-method}
\alias{isReadOnly,MsBackend-method}
\alias{length,MsBackend-method}
\alias{msLevel,MsBackend-method}
\alias{mz,MsBackend-method}
\alias{peaks,MsBackend-method}
\alias{peaksCount,MsBackend-method}
\alias{polarity,MsBackend-method}
\alias{polarity<-,MsBackend-method}
\alias{precScanNum,MsBackend-method}
\alias{precursorCharge,MsBackend-method}
\alias{precursorIntensity,MsBackend-method}
\alias{precursorMz,MsBackend-method}
\alias{rtime,MsBackend-method}
\alias{rtime<-,MsBackend-method}
\alias{scanIndex,MsBackend-method}
\alias{smoothed,MsBackend-method}
\alias{smoothed<-,MsBackend-method}
\alias{spectraData,MsBackend-method}
\alias{spectraData<-,MsBackend-method}
\alias{spectraNames,MsBackend-method}
\alias{spectraNames<-,MsBackend-method}
\alias{spectraVariables,MsBackend-method}
\alias{tic,MsBackend-method}
\alias{MsBackendMemory}
\title{Mass spectrometry data backends}
\usage{
\S4method{backendInitialize}{MsBackend}(object, files, spectraData, ...)

\S4method{acquisitionNum}{MsBackend}(object)

\S4method{centroided}{MsBackend}(object)

\S4method{centroided}{MsBackend}(object) <- value

\S4method{collisionEnergy}{MsBackend}(object)

\S4method{collisionEnergy}{MsBackend}(object) <- value

\S4method{fromFile}{MsBackend}(object)

\S4method{fileNames}{MsBackend}(object)

\S4method{intensity}{MsBackend}(object)

\S4method{ionCount}{MsBackend}(object)

\S4method{isCentroided}{MsBackend}(object, ...)

\S4method{isEmpty}{MsBackend}(x)

\S4method{isReadOnly}{MsBackend}(object)

\S4method{length}{MsBackend}(x)

\S4method{msLevel}{MsBackend}(object)

\S4method{mz}{MsBackend}(object)

\S4method{peaks}{MsBackend}(object)

\S4method{peaksCount}{MsBackend}(object)

\S4method{polarity}{MsBackend}(object)

\S4method{polarity}{MsBackend}(object) <- value

\S4method{precScanNum}{MsBackend}(object)

\S4method{precursorCharge}{MsBackend}(object)

\S4method{precursorIntensity}{MsBackend}(object)

\S4method{precursorMz}{MsBackend}(object)

\S4method{rtime}{MsBackend}(object)

\S4method{rtime}{MsBackend}(object) <- value

\S4method{scanIndex}{MsBackend}(object)

\S4method{smoothed}{MsBackend}(object)

\S4method{smoothed}{MsBackend}(object) <- value

\S4method{spectraData}{MsBackend}(object)

\S4method{spectraData}{MsBackend}(object) <- value

\S4method{spectraNames}{MsBackend}(object)

\S4method{spectraNames}{MsBackend}(object) <- value

\S4method{spectraVariables}{MsBackend}(object)

\S4method{tic}{MsBackend}(object)

MsBackendMemory()
}
\arguments{
\item{object}{Object extending \code{MsBackend}.}

\item{files}{For \code{backendInitialize}: \code{character} with the file names from
which the data is/will be imported. Should be set to \code{NA_character_} if
not applicable.}

\item{spectraData}{For \code{backendInitialize}: \code{DataFrame} with spectrum
metadata/data. Format and whether the argument is required depends on
the backend.}

\item{...}{Additional arguments.}

\item{value}{replacement value for \code{<-} methods. See individual method
description or expected data type.}

\item{x}{Object extending \code{MsBackend}.}
}
\description{
\code{MsBackend} objects provide access to mass spectrometry data. Such
backends can be generally classidied into \emph{in-memory} and \emph{on-disk} backends.
In-memory backends, such as \code{MsBackendMemory}, keep all (spectra) data in
memory ensuring fast data access. On-disk backends like the \code{MsBackendMzR}
keep only part of the data in memory retrieving the remaining data (mostly
m/z and intensity values) on-demand from disk.
}
\section{\code{MsBackendMemory}, in-memory MS data backend}{


The \code{MsBackendMemory} objects keep all MS data in memory. New objects can
be created with the \code{MsBackendMemory()} function. The backend can be
subsequently initialized with the \code{backendInitialize} method, taking a
\code{DataFrame} with the MS data as parameter. Suggested columns of this
\code{DataFrame} are:
\itemize{
\item \code{"msLevel"}: \code{integer} with MS levels of the spectra.
\item \code{"rt"}: \code{numeric} with retention times of the spectra.
\item \code{"acquisitionNum"}: \code{integer} with the acquisition number of the spectrum.
\item \code{"scanIndex"}: \code{integer} with the index of the scan/spectrum within the
\emph{mzML}/\emph{mzXML}/\emph{CDF} file.
\item \code{"fromFile"}: \code{integer} indicating in which file in an experiment the
spectrum was measured.
\item \code{"centroided"}: \code{logical} whether the spectrum is centroided.
\item \code{"smoothed"}: \code{logical} whether the spectrum was smoothed.
\item \code{"polarity"}: \code{integer} with the polarity information of the spectra.
\item \code{"precScanNum"}: \code{integer} specifying the index of the (MS1) spectrum
containing the precursor of a (MS2) spectrum.
\item \code{"precursorMz"}: \code{numeric} with the m/z value of the precursor.
\item \code{"precursorIntensity"}: \code{numeric} with the intensity value of the
precursor.
\item \code{"precursorCharge"}: \code{integer} with the charge of the precursor.
\item \code{"collisionEnergy"}: \code{numeric} with the collision energy.
\item \code{"mz"}: \code{list} of \code{numeric} vectors representing the m/z values for each
spectrum.
\item \code{"intensity"}: \code{list} of \code{numeric} vectors representing the intensity
values for each spectrum.
}

Additional columns are allowed too.
}

\section{Backend functions and implementation notes for new backend classes}{


New backend classes should extend the base \code{MsBackend} class and \strong{have} to
implement the following methods:
\itemize{
\item \code{acquisitionNum}: get the acquisition number of each spectrum. Returns an
\code{integer} of length equal to the number of spectra (with \code{NA_integer_} if
not available).
\item \code{backendInitialize}: initialize the backend. This method is supposed to be
called rights after creating an instance of the backend class and should
prepare the backend (e.g. set the data for the memory backend or read
the spectra header data for the \code{MsBackendMzR} backend).
\item \code{centroided}, \code{centroided<-}: get or set the centroiding information of
the spectra. \code{centroided} returns a \code{logical} vector of length equal to the
number of spectra with \code{TRUE} if a spectrum is centroided, \code{FALSE} if it
is in profile mode and \code{NA} if it is undefined. See also \code{isCentroided}
for estimating from the spectrum data whether the spectrum is centroided.
\code{value} for \code{centroided<-} is either a single \code{logical} or a \code{logical}
of length equal to the number of spectra in \code{object}.
\item \code{collisionEnergy}, \code{collisionEnergy<-}: get or set the collision energy
for all spectra in \code{object}. \code{collisionEnergy} returns a \code{numeric} with
length equal to the number of spectra (\code{NA_real_} if not present/defined),
\code{collisionEnergy<-} takes a \code{numeric} of length equal to the number of
spectra in \code{object}.
\item \code{fileNames}: get the file names.
\item \code{fromFile}: get the file/sample assignment of each spectrum. Returns an
\code{integer} vector of length equal to the number of spectra in \code{object}.
\item \code{intensity}: get the intensity values from the spectra. Returns a
\code{list} of \code{numeric} vectors (intensity values for each spectrum). The
length of the \code{list} is equal to the number of \code{spectra} in \code{object}.
\item \code{ionCount}: returns a \code{numeric} representing the sum of intensities for
each spectrum.
\item \code{isCentroided}: a heuristic approach assessing if the spectra in \code{object}
are in profile or centroided mode. The function takes the \code{qtl}th quantile
top peaks, then calculates the difference between adjacent M/Z value and
returns \code{TRUE} if the first quartile is greater than \code{k}. (See
\code{MSnbase:::.isCentroided} for the code.)
\item \code{isEmpty}: whether a spectrum in \code{object} is empty (i.e. does not contain
any peaks). Returns a \code{logical} vector (length equal number of spectra).
\item \code{length}: get the number of spectra in the object.
\item \code{msLevel}: get the spectra's MS level. Returns an \code{integer} vector (length
equal to the number of spectra) with the MS level for each spectrum (or
\code{NA_integer_} if not available).
\item \code{mz}: get the mass-to-charge ratios (m/z) from the spectra. Returns a
\code{list} or length equal to the number of spectra, each element a \code{numeric}
vector with the m/z values of one spectrum.
\item \code{polarity}, \code{polarity<-}: get or set the polarity for each spectrum.
\code{polarity} returns an \code{integer} vector (length equal to the number of
spectra), with \code{0} and \code{1} representing negative and positive polarity,
respectively. \code{polarity<-} expects an integer vector of length 1 or equal
to the number of spectra.
\item \code{peaksCount}: get the number of peaks (m/z-intensity values) per spectrum.
Returns an \code{integer} vector (length equal to the number of spectra).
\item \code{precursorCharge}, \code{precursorIntensity}, \code{precursorMz}, \code{precScanNum}: get
the charge (\code{integer}), intensity (\code{numeric}), m/z (\code{numeric}) and scan
index (\code{integer}) of the precursor for MS level > 2 spectra from the
object. Returns a vector of length equal to the number of spectra in
\code{object}. \code{NA} are reported for MS1 spectra of if no precursor information
is available.
\item \code{isReadOnly}: returns a \code{logical(1)} whether the backend is \emph{read only} or
does allow also to write/update data.
\item \code{rtime}, \code{rtime<-}: get or set the retention times for each spectrum.
\code{rtime} returns a \code{numeric} vector (length equal to the number of spectra)
with the retention time for each spectrum.
\code{rtime<-} expects a numeric vector with length equal to the number of
spectra.
\item \code{scanIndex}: get an \code{integer} vector with the \emph{scan index} for each
spectrum. This represents the relative index of the spectrum within each
file (i.e. for each sample). Note that this can be different to the
\code{acquisitionNum} of the spectrum which is the index of the spectrum as
reported in the mzML file.
\item \code{smoothed},\code{smoothed<-}: get or set the information whether a spectrum
was \emph{smoothed}. \code{smoothed} returns a \code{logical} vector of
length equal to the number of spectra. \code{smoothed<-} takes a \code{logical}
vector of length 1 or equal to the number of spectra in \code{object}.
\item \code{spectraData}, \code{spectraData<-}: get or set general spectrum metadata.
\code{spectraData} returns a \code{DataFrame}, \code{spectraData<-} expects a \code{DataFrame}.
\item \code{spectraNames}: returns a \code{character} vector with the names of the spectra
in \code{object}.
\item \code{spectraVariables}: returns a \code{character} vector with the available
spectra variables (columns, fields or attributes) available in \code{object}.
\item \code{tic}: get the total ion current/count (sum of signal of a spectrum) for
all spectra in \code{object}. By default, the value reported in the original
raw data file is returned.
}
}

\author{
Johannes Rainer, Sebastian Gibb, Laurent Gatto
}
